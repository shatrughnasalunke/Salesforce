/*
: xxxxx
Name               : GenerateReport
Description        : 
Created By Name    : Shatrughna Salunke
Careated Date      : 7 Jan, 2021 
Last Modified  By  : Shatrughna Salunke
Last Modified Date : 7 Jan,2021
User Story Number  :  
*/
public with sharing class GenerateReport {
  
    public static void  getAccountList(List<Account> listOfAccount,List<Audit__c> listOfAudit){
      
        String emailTo, emailCC,emailSubject,emailBody, setContentType, setFileName;
        emailBody=String.valueOf(listOfAccount) ;
        if(listOfAudit.size()>0 && !listOfAudit.isEmpty()) {
            setFileName=listOfAudit[0].shatrughna94__SalesRepresentatives__c+' : Report';
            emailSubject=listOfAudit[0].Type__c+' '+'Report Generated By'+' '+listOfAudit[0].OwnerId+' '+'For Sales Reps'+' '+listOfAudit[0].shatrughna94__SalesRepresentatives__c;
            setContentType=listOfAudit[0].shatrughna94__FileType__c;
            emailTo=listOfAudit[0].shatrughna94__To_Address__c;
            emailCC=listOfAudit[0].shatrughna94__CcAddress__c;
            sendEmail(emailTo,emailCC,emailSubject, emailBody, setContentType, setFileName);
        } 
    }  
    public static  Boolean sendEmail(String emailTo, String emailCC, String emailSubcject , String emailBody,String setContentType,String setFileName){
        List<OrgWideEmailAddress> lstOrgWideEmailId = [SELECT Id, DisplayName, IsAllowAllProfiles, Address FROM OrgWideEmailAddress];
        String orgWideEmailAddressID;
        Boolean isSuccess = false;       
        Blob body = Blob.valueOf(emailBody);
        Messaging.EmailFileAttachment attach = new Messaging.EmailFileAttachment();
        attach.setContentType(setContentType);
        attach.setFileName(setFileName);
        attach.setInline(false);
        attach.Body = body;
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.setUseSignature(false);
        String[] toAddresses = new String[]{};
            for(String emailId:emailTo.split(',')){
                if(emailId != null && emailId !=''&& emailId != ' '){
                    toAddresses.add(emailId.trim());
                }
            }
        mail.setToAddresses(toAddresses);
        String[] ccAddresses = new String[]{};
            for(String emailId:emailCC.split(',')){
                if(emailId != null && emailId !=''&& emailId != ' '){
                    ccAddresses.add(emailId);
                }
            }
        mail.setCCAddresses(ccAddresses);
        mail.setSubject(emailSubcject);
        mail.setPlainTextBody((emailBody==null?'This email body is empty':emailBody));
        mail.setHtmlBody('<h3>Dear Shatrughna Salunke ,</h3><br/><body>This email genrate and attached the file for Sales Reps report as per user request </body>'
                        );
        if(lstOrgWideEmailId.size() == 0){
        }
        else {
            orgWideEmailAddressID = lstOrgWideEmailId[0].id;    
        }
        mail.setFileAttachments(new Messaging.EmailFileAttachment[] { attach });
        try {
            List<Messaging.SendEmailResult> results = Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });  
            if(results[0].success) {
                
                isSuccess = TRUE;
            }
            else{
                isSuccess = FALSE;
            }
        } 
        catch(Exception ex) {
            isSuccess = FALSE;
            HandleCustomException.LogException( ex);
        }
        return isSuccess; 
    }
    public static void GenerateReportFromTrigger(List<Audit__c> listOfAudit){
        List<SObject> listOfRecords = new List<sObject>();
        String SobjectApiName =  listOfAudit[0].Type__c;
        String userId =listOfAudit[0].shatrughna94__SalesRepresentatives__c;
        Date ToDate = listOfAudit[0].shatrughna94__ToDate__c;
        Date FromDate = listOfAudit[0].shatrughna94__FromDate__c;
        Map<String, Schema.SObjectType> schemaMap = Schema.getGlobalDescribe();
        Map<String, Schema.SObjectField> fieldMap = schemaMap.get(SobjectApiName).getDescribe().fields.getMap();
        String commaSepratedFields = '';
        String Createddate='';
        String storedUserId='';
        for(String fieldName : fieldMap.keyset()){
            if (fieldName=='createddate') {
                Createddate=fieldName;
            }
            if(fieldName=='OwnerId') {
                storedUserId=fieldName;
            }
            if(commaSepratedFields == null || commaSepratedFields == ''){
                commaSepratedFields = fieldName;
            }
            else{
                commaSepratedFields = commaSepratedFields + ', ' + fieldName;
            }
        }
        String query = 'select '+commaSepratedFields+' from '+SobjectApiName;//+' where '+Createddate+'>=:'+'FromDate'+'AND'+storedUserId+'='+'userId';
        
        try {
            listOfRecords = Database.query(query);  
            System.debug(listOfRecords.size());    
            if (!listOfRecords.isEmpty() && listOfRecords.size()>0) {
                getAccountList(listOfRecords, listOfAudit);
            }
      
        }
        catch (Exception e) {
            HandleCustomException.LogException(e);
        }
    }
}